'''
Consider a Car class as given in the code. Write a Service class as given in the class diagram below which performs various activities on a list of cars.
Assume that the car_list is sorted by year in ascending order. 

Service
-------------------------------
- car_list
-------------------------------
__init__(car_list) 
+ get_car_list()
+ find_cars_by_year(year) 
+ add_cars(new_car_list) 
+ remove_cars_from_karnataka()
-------------------------------

	Method							Description
__init__(car_list)			Initializes the instance variable, car_list.
find_cars_by_year(year)			Finds and returns the list of models of all the cars with the year as the one passed as the argument. If there are no cars, return None.
add_cars(new_car_list)			The new_car_list should be added to the instance variable car_list.
					The car_list should be still sorted such that the years are in ascending order.
remove_cars_from_karnataka()		Finds and removes all cars with registration number beginning with “KA” from the car_list.

'''
#DSA-Assgn-2


class Car:
    def __init__(self,model,year,registration_number):
        self.__model=model
        self.__year=year
        self.__registration_number=registration_number

    def get_model(self):
        return self.__model

    def get_year(self):
        return self.__year

    def get_registration_number(self):
        return self.__registration_number

    def __str__(self):
        return(self.__model+" "+self.__registration_number+" "+(str)(self.__year))

class Service:
    def __init__(self, car_list):
        self.__car_list=car_list

    def get_car_list(self):
        return self.__car_list
    
    def find_cars_by_year(self,year):
        l1=[]
        for i in self.__car_list:
            if i.get_year()==year:
                l1.append(i.get_model())
            else:
                continue
        if len(l1)!=0:
            return l1
        else:
            return None
    
    
    def add_cars(self,new_car_list):
        self.__car_list+=new_car_list
        self.__car_list.sort(key= lambda x:x.get_year())
        
        return self.__car_list
    
    def remove_cars_from_karnataka(self):
# '''using remove function:'''
#         for i in self.__car_list[::-1]:
#             if i.get_registration_number()[:2].upper()=="KA":
#                 self.__car_list.remove(i)
#         return self.__car_list
#  '''   OR    '''
        res=[]
        for i in range(len(self.__car_list)):
            if self.__car_list[i].get_registration_number()[:2].upper()!="KA":
                res.append(self.__car_list[i])
        self.__car_list=res
        return self.__car_list
        

car1=Car("WagonR",2010,"KA09 3056")
car2=Car("Beat", 2011, "MH10 6776")
car3=Car("Ritz", 2013,"KA12 9098")
car4=Car("Polo",2013,"GJ01 7854")
car5=Car("Amaze",2014,"KL07 4332")
car6=Car("swift",2010,"KA01 7854")
car7=Car("swift desire",2009,"KL07 4332")

#Add different values to the list and test the program
s1=Service(car_list=[car1, car2, car3, car4,car5])
#Create object of Service class, invoke the methods and test your program
s1.find_cars_by_year(2013)
s1.add_cars([car6,car7])
s1.remove_cars_from_karnataka()
for i in s1.get_car_list():
    print(i.__str__())